name: deploy dev

on:
  push:
    branches: [ main ]

jobs:
  build:
    # The type of runner that the job will run on (use alpine node?)
    runs-on: node:14
    
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: npm ci
      run: npm ci

    # TODO: tests

    - name: npm run build
      run: npm run build

    - uses: actions/upload-artifact@master
      with:
        name: dist
        path: dist

  terraform-apply:
    runs-on: hashicorp/terraform:0.14.3

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-central-1
      TF_VAR_s3bucket_name: ${{ secrets.S3BUCKET_NAME }}

    steps:
    - uses: actions/checkout@v2

    - name: terraform apply
      run: terraform apply -auto-approve

  deploy:
    runs-on: amazon/aws-cli

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: eu-central-1
      S3BUCKET_NAME: ${{ secrets.S3BUCKET_NAME }}

    steps:
    - uses: actions/download-artifact@master
      with:
        name: dist
        path: dist
    - name: upload to S3
      run: |
        CREDS=`aws sts assume-role --role-arn arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/ci-role --role-session-name=ci_user`
        export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r '.Credentials.AccessKeyId'`
        export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
        export AWS_SESSION_TOKEN=`echo $CREDS | jq -r '.Credentials.SessionToken'`

        cd dist
        aws s3 sync . s3://$S3BUCKET_NAME --delete --cache-control max-age=31536000,public --exclude index.html --acl public-read
        aws s3 cp index.html s3://$S3BUCKET_NAME/index.html --metadata-directive REPLACE --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --acl public-read
        
